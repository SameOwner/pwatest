━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
★☆★HTML
　＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
//■スクリプトタグ
<script type="text/javascript">
</script>

【外部ファイル使用時】
<script type="text/javascript" src="【ファイルパスとファイル名】"></script>

//■イメージタグ
<img src="【ファイルパスとファイル名】">


//■IDを持ったDIVタグ
<div id="【ID名】">
</div>


//■FORMタグ
<input id="【ID名】" type="text" value="【初期値】">


//■アンカータグ
<a href="【遷移先URL】"></a>


//■CAMVASタグ
<canvas id="【ID名】" width="【横サイズ】" height="【高さサイズ】"></canvas>

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
★☆★JAVASCRIPT
　＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

//■配列の宣言
var 配列名 = [];

//■アラート文
alert(【画面に表示したいデータ】);


//■if文
if(【条件式1】){
	//条件式1が正しい場合の処理
}else if(【条件式2】){
	//条件式2が正しい場合の処理
}else{
	//条件式に該当しない場合の処理
}


//■for文
for(var i = 0; i<【繰り返し回数】; i++){
	//繰り返し処理
}


//■ランダム処理
Math.random()


//■切り捨て
Math.floor(【切り捨てする数字】)


//■DOMへのアクセス
document.getElementById(【タグのID名】)


//■タグに挟まれた内容を参照するor書き換える
document.getElementById(【タグのID名】).innerHTML


//■FORMタグを参照するor書き換える
document.getElementById(【タグのID名】).value


■あるDOMの画面上の位置を取得する。
【変数名1】 = document.getElementById(【タグのID名】).getBoundingClientRect();
【変数名2】 = 【変数名1】.left;
【変数名3】 = 【変数名1】.top;


//■イベントリスナー
【イベントを付与するパーツ】.addEventListener("mousedown", 【関数名】, false);
【イベントを付与するパーツ】.addEventListener("mouseup", 【関数名】, false);
【イベントを付与するパーツ】.addEventListener("mousemove", 【関数名】, false);


■座標受け取り
【変数名】 = 【引数名】.clientX;
【変数名】 = 【引数名】.clientY;


■関数の宣言
＜その1＞
function 【関数名】(【引数1】,【引数2】,【引数3】…){
	関数の内容
}

＜その2＞
var render_canvas = function(【引数1】,【引数2】,【引数3】…){
	関数の内容
}

■ウィンドウ読み込み完了後に実行
window.onload = function(){

■時限実行
【変数】 = setTimeout(【動作させる関数】, 【動作させる経過ミリ秒】);


■画像オブジェクトの作成
変数名 = new Image();
変数名.src = 【画像のファイルパス】;


■画像の読み込み終了の感知
【画像オブジェクト名】.onload


■キャンバスオブジェクトの取得
【変数名】 = document.getElementById(【タグのID名】).getContext("2d");


■キャンバスオブジェクトに色を設定する
【キャンバスオブジェクト】.fillStyle = "色名";

■キャンバスオブジェクトに色を塗る
【キャンバスオブジェクト】.fillRect(塗り始め位置X座標,塗り始め位置Y座標,塗る幅,塗る高さ);


■キャンバスにテキストフォントを設定
【キャンバスオブジェクト】.font = 【フォントサイズ】 + "px '【フォント名】'";


■キャンバスにテキストを表示する
【キャンバスオブジェクト】.fillText(【表示する文章】,【表示するX座標】,【表示するY座標】);
				

■キャンバスに画像を表示する
【キャンバスオブジェクト】.drawImage(【画像オブジェクト名】,【画像オブジェクトを切り出すX座標】,【画像オブジェクトを切り出すY座標】,【画像オブジェクトを切り出す横サイズ】,【画像オブジェクトを切り出す高さサイズ】,【画像を張り付けるキャンバス上のX座標】,【画像を張り付けるキャンバス上のY座標】,【画像を張り付けるキャンバス上の横サイズ】,【画像を張り付けるキャンバス上の高さサイズ】);


■文字列を分割する
【変数名】 = 【文字列変数】.split(分割の区切りとなる文字列); 


■文字列を結合する
【変数名】 = 【配列名】.join(分割の区切りとなる文字列); 

■オーディオオブジェクトを宣言する
【変数名】 = new Audio("");

■オーディオオブジェクトの自動実行設定
【オーディオオブジェクト名】.autoplay = false;

■オーディオオブジェクトにオーディオファイルを読み込む
【オーディオオブジェクト名】.src = 【ファイルパスとファイル名】;

■オーディオオブジェクトのループ設定
【オーディオオブジェクト名】.loop = true;

■オーディオオブジェクトの再生位置指定
【オーディオオブジェクト名】.currentTime = 再生タイム

■オーディオオブジェクトの再生
【オーディオオブジェクト名】.play();

■オーディオオブジェクトの停止
【オーディオオブジェクト名】.pause();

■オーディオオブジェクトの再生状況を取得
【オーディオオブジェクト名】.paused


■コンストラクタにパラメータを追加
this.【パラメータ名】

■インスタンスの作成
var 【インスタンス名】 = new 【コンストラクタ名】(【引数1】,【引数2】,【引数3】…);

■インスタンスに動的メソッド追加
【インスタンス名】.【メソッド名】 = function(【引数1】,【引数2】,【引数3】…){


■Prototypeにメソッド追加
【インスタンス名】.prototype = {
	【メソッド名】  : function(【引数1】,【引数2】,【引数3】…){
	}
}

■テキストをJSON化
JSON.parse(【JSON】);

■JSONをテキスト化
JSON.stringify(【JSON】);

■Cookieの読み出し
【変数名】 = document.cookie;

■Cookieの書き込み
document.cookie = '【保存する文字列】; max-age=360000';

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━